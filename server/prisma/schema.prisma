// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                 @id @default(uuid())
  email         String                 @unique
  password      String
  fullName      String
  isGuest       Boolean                @default(false)
  isAdmin       Boolean                @default(false)
  isActive      Boolean                @default(true)
  lastLogin     DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  wishlists     Wishlist[]
  collaborating WishlistCollaborator[]

  createdItems     Item[]     @relation("ItemCreator")
  updatedItems     Item[]     @relation("ItemUpdater")
  createdWishlists Wishlist[] @relation("WishlistCreator")
  updatedWishlists Wishlist[] @relation("WishlistUpdater")
  Item             Item[]
}

model Wishlist {
  id            String                 @id @default(cuid())
  name          String
  description   String?
  isPublic      Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  userId        String
  publicId      String?                @unique
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdById   String?
  createdBy     User?                  @relation("WishlistCreator", fields: [createdById], references: [id], onDelete: Cascade)
  updatedById   String?
  updatedBy     User?                  @relation("WishlistUpdater", fields: [updatedById], references: [id], onDelete: Cascade)
  items         Item[]
  collaborators WishlistCollaborator[]

  @@index([userId])
  @@index([publicId])
  @@index([createdById])
  @@index([updatedById])
}

model WishlistCollaborator {
  id         String   @id @default(cuid())
  wishlistId String
  userId     String
  canEdit    Boolean  @default(false)
  createdAt  DateTime @default(now())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, userId])
  @@index([wishlistId])
  @@index([userId])
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Float?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wishlistId  String
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdBy   User?    @relation("ItemCreator", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String?
  updatedBy   User?    @relation("ItemUpdater", fields: [updatedById], references: [id], onDelete: Cascade)
  updatedById String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([wishlistId])
  @@index([createdById])
  @@index([updatedById])
}
